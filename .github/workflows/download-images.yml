name: Download Images

on:
  workflow_dispatch:
    inputs:
      start_range:
        description: "Start range (optional)"
        required: false
        type: string
      end_range:
        description: "End range (optional)"
        required: false
        type: string
  schedule:
    - cron: "0 0 * * *" # Run daily at midnight UTC

jobs:
  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      total_end: ${{ steps.set-matrix.outputs.total_end }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Load state and prepare matrix
        id: set-matrix
        run: |
          if [ -f range.json ]; then
            start=$(jq -r '.start' range.json)
            end=$(jq -r '.end' range.json)
          else
            start="${{ inputs.start_range || '87000' }}"
            end="${{ inputs.end_range || '87500' }}"
          fi
          
          # Calculate batches of 500
          ranges=()
          current=$start
          while [ $current -lt $end ]; do
            batch_end=$((current + 500))
            if [ $batch_end -gt $end ]; then
              batch_end=$end
            fi
            ranges+=("{\"start\":$current,\"end\":$batch_end}")
            current=$((batch_end + 1))
          done
          
          matrix=$(printf '%s\n' "${ranges[@]}" | jq -sc '{range: .}')
          echo "matrix=$matrix" >> $GITHUB_OUTPUT
          echo "total_end=$end" >> $GITHUB_OUTPUT

  download-batch:
    needs: prepare-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.prepare-matrix.outputs.matrix)}}
      fail-fast: false
      max-parallel: 2
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests Pillow

      - name: Process batch
        run: |
          today=$(date +%Y%m%d)
          folder="images_${today}_${{ matrix.range.start }}_to_${{ matrix.range.end }}"
          mkdir -p "$folder"
          
          echo "Processing batch: ${{ matrix.range.start }} to ${{ matrix.range.end }}"
          python script.py ${{ matrix.range.start }} ${{ matrix.range.end }}

      - name: Upload batch artifacts
        uses: actions/upload-artifact@v4
        with:
          name: batch-${{ matrix.range.start }}-${{ matrix.range.end }}
          path: images_*
          retention-days: 1

  commit-changes:
    needs: [prepare-matrix, download-batch]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./downloads
          merge-multiple: true

      - name: Move artifacts to root
        run: |
          cp -r ./downloads/* ./
          rm -rf ./downloads

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Debug Secrets
        env:
          MONGODB_URL: ${{ secrets.MONGODB_URL }}
        run: |
          if [ -n "$MONGODB_URL" ]; then
            echo "MONGODB_URL is accessible"
            echo "MongoDB URL length: ${#MONGODB_URL}"
          else
            echo "MONGODB_URL is not accessible"
            exit 1
          fi

      - name: Debug MongoDB URL (masked)
        env:
          MONGODB_URL: ${{ secrets.MONGODB_URL }}
        run: |
          echo "MONGODB_URL is set (length: ${#MONGODB_URL})"

      - name: Install MongoDB dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pymongo

      - name: Upload to MongoDB
        env:
          MONGODB_URL: ${{ secrets.MONGODB_URL }}
        run: |
          if [ -n "$MONGODB_URL" ]; then
            echo "MongoDB URL is set (length: ${#MONGODB_URL})"
            
            # Process each image folder
            for folder in images_*; do
              if [ -d "$folder" ]; then
                echo "Processing folder: $folder"
                python3 upload_to_db.py "$folder"
              fi
            done
          else
            echo "Error: MongoDB URL is not set"
            exit 1
          fi

      - name: Commit and push changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Update range.json for next run
          next_start=$((${{ needs.prepare-matrix.outputs.total_end }} + 1))
          next_end=$((${{ needs.prepare-matrix.outputs.total_end }} + 501))
          echo "{\"start\": $next_start, \"end\": $next_end}" > range.json
          git add range.json

          # Add all downloaded images
          git add images_*
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          
          today=$(date +%Y%m%d)
          git commit -m "chore: download images ${today} from ${next_start} to ${next_end}"
          git push
